# 1290 convert binary number in a linked list to integer
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
	def getDecimalValue(self, head: ListNode) -> int:
		lst = []
		p = head 
		while p:
			lst.append(p.val)
			p = p.next 
		
		num, base = 0, 1
		for b in lst[::-1]:
			num += (base * b)
			base *= 2
		return num


# 1291 sequential digits

class Solution:
	def sequentialDigits(self, low: int, high: int) -> List[int]:
		len_low, len_high = len(str(low)), len(str(high))
		ret = []
		for l in range(len_low, len_high+1):
			for start in range(1, 11-l):
				num = int("".join([str(start+i) for i in range(l)]))
				if low <= num <= high:
					ret.append(num)
		return ret

# 1292 maximum side length of a square with sum less than or equal to threshold

class Solution:
	def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:
		if not mat or not mat[0]:
			return 0 
		m, n = len(mat), len(mat[0])
		
		def expand(upleft_row, upleft_col, length):
			exp_row, exp_col = upleft_row+length, upleft_col+length
			s = 0
			for i in range(length):
				s += mat[upleft_row+i][exp_col]
				s += mat[exp_row][upleft_col+i]
			s += mat[exp_row][exp_col]
			return s
		
		def shrink(upright_row, upright_col, length):
			shr_row, shr_col = upright_row+length-1, upright_col-length+1
			s = 0
			for i in range(length - 1):
				s += mat[upright_row+i][shr_col]
				s += mat[shr_row][upright_col-i]
			s += mat[shr_row][shr_col]
			return s
		
		max_side_length = 0
		for start_row in range(m):
			l, ulr, ulc, urr, urc, s = 1, start_row, 0, start_row, 0, mat[0][0]
			while urc < n:
				print("urc:", urc)
				while ulc+l<n-1 and ulr+l<m-1 and s <= threshold:
					max_side_length = max(max_side_length, l)
					s += expand(ulr, ulc, l)
					l += 1
				print("l:", l, "s:", s)
				if s <= threshold:
					max_side_length = max(max_side_length, l)
				urc = ulc + l - 1 
				while l >= 1 and s > threshold:
					s -= shrink(urr, urc, l)
					l -= 1
				print("l:", l, "s:", s)
				if s <= threshold:
					max_side_length = max(max_side_length, l)
				ulc = urc - l + 1
		return max_side_length
					
			
			
				
		

# 1293 shortest path in a grid with obstacles elimination
class Solution:
	def shortestPath(self, grid: List[List[int]], k: int) -> int: