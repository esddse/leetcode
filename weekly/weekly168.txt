# 1295 find numbers with event number of digits
class Solution:
	def findNumbers(self, nums: List[int]) -> int:
		return sum([1 if len(str(num))%2==0 else 0 for num in nums])
		
# 1296 divide array in sets of k consecutive numbers 
from collections import Counter
class Solution:
	def isPossibleDivide(self, nums: List[int], k: int) -> bool:
		size = len(nums)
		if size == 0 or size % k != 0:
			return False
		counter = Counter(nums)
		for i in sorted(counter):
			if counter[i] == 0:
				continue 
			elif counter[i] < 0 or counter[i] > size // k:
				return False 
			else:
				cnt = counter[i]
				for j in range(i, i+k):
					if j not in counter:
						return False 
					else:
						counter[j] -= cnt 
		return True
		
# 1297 maximum number of occurrence of a  substring
from collections import Counter
class Solution:
	def maxFreq(self, s: str, maxLetters: int, minSize: int, maxSize: int) -> int:
		size = len(s)
		substr_counter = Counter()
		cha_counter = Counter()
		charnum = 0
		max_occur = 0
		for i in range(size-minSize+1):
			substr = s[i:i+minSize]
			if i == 0:
				cha_counter.update(substr)
				charnum = len(cha_counter)
			else:
				deletec, addc = s[i-1], substr[-1]
				cha_counter[deletec] -= 1
				if cha_counter[deletec] == 0:
					charnum -= 1
				cha_counter[addc] += 1
				if cha_counter[addc] == 1:
					charnum += 1
			if charnum > maxLetters:
				continue 
			substr_counter[substr] += 1
			max_occur = max(max_occur, substr_counter[substr])
		return max_occur
		
				